// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/mysocketio/mysocketctl-go/internal/api/models"
	mock "github.com/stretchr/testify/mock"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

type API_Expecter struct {
	mock *mock.Mock
}

func (_m *API) EXPECT() *API_Expecter {
	return &API_Expecter{mock: &_m.Mock}
}

// AttachPolicies provides a mock function with given fields: ctx, socketID, policyUUIDs
func (_m *API) AttachPolicies(ctx context.Context, socketID string, policyUUIDs []string) ([]string, error) {
	ret := _m.Called(ctx, socketID, policyUUIDs)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, socketID, policyUUIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, socketID, policyUUIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_AttachPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachPolicies'
type API_AttachPolicies_Call struct {
	*mock.Call
}

// AttachPolicies is a helper method to define mock.On call
//  - ctx context.Context
//  - socketID string
//  - policyUUIDs []string
func (_e *API_Expecter) AttachPolicies(ctx interface{}, socketID interface{}, policyUUIDs interface{}) *API_AttachPolicies_Call {
	return &API_AttachPolicies_Call{Call: _e.mock.On("AttachPolicies", ctx, socketID, policyUUIDs)}
}

func (_c *API_AttachPolicies_Call) Run(run func(ctx context.Context, socketID string, policyUUIDs []string)) *API_AttachPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *API_AttachPolicies_Call) Return(_a0 []string, _a1 error) *API_AttachPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateSocket provides a mock function with given fields: ctx, socket
func (_m *API) CreateSocket(ctx context.Context, socket *models.Socket) (*models.Socket, error) {
	ret := _m.Called(ctx, socket)

	var r0 *models.Socket
	if rf, ok := ret.Get(0).(func(context.Context, *models.Socket) *models.Socket); ok {
		r0 = rf(ctx, socket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Socket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Socket) error); ok {
		r1 = rf(ctx, socket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_CreateSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSocket'
type API_CreateSocket_Call struct {
	*mock.Call
}

// CreateSocket is a helper method to define mock.On call
//  - ctx context.Context
//  - socket *models.Socket
func (_e *API_Expecter) CreateSocket(ctx interface{}, socket interface{}) *API_CreateSocket_Call {
	return &API_CreateSocket_Call{Call: _e.mock.On("CreateSocket", ctx, socket)}
}

func (_c *API_CreateSocket_Call) Run(run func(ctx context.Context, socket *models.Socket)) *API_CreateSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Socket))
	})
	return _c
}

func (_c *API_CreateSocket_Call) Return(_a0 *models.Socket, _a1 error) *API_CreateSocket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateTunnel provides a mock function with given fields: ctx, socketID
func (_m *API) CreateTunnel(ctx context.Context, socketID string) (*models.Tunnel, error) {
	ret := _m.Called(ctx, socketID)

	var r0 *models.Tunnel
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Tunnel); ok {
		r0 = rf(ctx, socketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tunnel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_CreateTunnel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTunnel'
type API_CreateTunnel_Call struct {
	*mock.Call
}

// CreateTunnel is a helper method to define mock.On call
//  - ctx context.Context
//  - socketID string
func (_e *API_Expecter) CreateTunnel(ctx interface{}, socketID interface{}) *API_CreateTunnel_Call {
	return &API_CreateTunnel_Call{Call: _e.mock.On("CreateTunnel", ctx, socketID)}
}

func (_c *API_CreateTunnel_Call) Run(run func(ctx context.Context, socketID string)) *API_CreateTunnel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *API_CreateTunnel_Call) Return(_a0 *models.Tunnel, _a1 error) *API_CreateTunnel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteSocket provides a mock function with given fields: ctx, socketID
func (_m *API) DeleteSocket(ctx context.Context, socketID string) error {
	ret := _m.Called(ctx, socketID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, socketID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// API_DeleteSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSocket'
type API_DeleteSocket_Call struct {
	*mock.Call
}

// DeleteSocket is a helper method to define mock.On call
//  - ctx context.Context
//  - socketID string
func (_e *API_Expecter) DeleteSocket(ctx interface{}, socketID interface{}) *API_DeleteSocket_Call {
	return &API_DeleteSocket_Call{Call: _e.mock.On("DeleteSocket", ctx, socketID)}
}

func (_c *API_DeleteSocket_Call) Run(run func(ctx context.Context, socketID string)) *API_DeleteSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *API_DeleteSocket_Call) Return(_a0 error) *API_DeleteSocket_Call {
	_c.Call.Return(_a0)
	return _c
}

// DetachPolicies provides a mock function with given fields: ctx, socketID, policyUUIDs
func (_m *API) DetachPolicies(ctx context.Context, socketID string, policyUUIDs []string) ([]string, error) {
	ret := _m.Called(ctx, socketID, policyUUIDs)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, socketID, policyUUIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, socketID, policyUUIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_DetachPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachPolicies'
type API_DetachPolicies_Call struct {
	*mock.Call
}

// DetachPolicies is a helper method to define mock.On call
//  - ctx context.Context
//  - socketID string
//  - policyUUIDs []string
func (_e *API_Expecter) DetachPolicies(ctx interface{}, socketID interface{}, policyUUIDs interface{}) *API_DetachPolicies_Call {
	return &API_DetachPolicies_Call{Call: _e.mock.On("DetachPolicies", ctx, socketID, policyUUIDs)}
}

func (_c *API_DetachPolicies_Call) Run(run func(ctx context.Context, socketID string, policyUUIDs []string)) *API_DetachPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *API_DetachPolicies_Call) Return(_a0 []string, _a1 error) *API_DetachPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAccessToken provides a mock function with given fields:
func (_m *API) GetAccessToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// API_GetAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessToken'
type API_GetAccessToken_Call struct {
	*mock.Call
}

// GetAccessToken is a helper method to define mock.On call
func (_e *API_Expecter) GetAccessToken() *API_GetAccessToken_Call {
	return &API_GetAccessToken_Call{Call: _e.mock.On("GetAccessToken")}
}

func (_c *API_GetAccessToken_Call) Run(run func()) *API_GetAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *API_GetAccessToken_Call) Return(_a0 string) *API_GetAccessToken_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetOrganizationInfo provides a mock function with given fields: ctx
func (_m *API) GetOrganizationInfo(ctx context.Context) (*models.Organization, error) {
	ret := _m.Called(ctx)

	var r0 *models.Organization
	if rf, ok := ret.Get(0).(func(context.Context) *models.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetOrganizationInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInfo'
type API_GetOrganizationInfo_Call struct {
	*mock.Call
}

// GetOrganizationInfo is a helper method to define mock.On call
//  - ctx context.Context
func (_e *API_Expecter) GetOrganizationInfo(ctx interface{}) *API_GetOrganizationInfo_Call {
	return &API_GetOrganizationInfo_Call{Call: _e.mock.On("GetOrganizationInfo", ctx)}
}

func (_c *API_GetOrganizationInfo_Call) Run(run func(ctx context.Context)) *API_GetOrganizationInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *API_GetOrganizationInfo_Call) Return(_a0 *models.Organization, _a1 error) *API_GetOrganizationInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPoliciesBySocketID provides a mock function with given fields: socketID
func (_m *API) GetPoliciesBySocketID(socketID string) ([]models.Policy, error) {
	ret := _m.Called(socketID)

	var r0 []models.Policy
	if rf, ok := ret.Get(0).(func(string) []models.Policy); ok {
		r0 = rf(socketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetPoliciesBySocketID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoliciesBySocketID'
type API_GetPoliciesBySocketID_Call struct {
	*mock.Call
}

// GetPoliciesBySocketID is a helper method to define mock.On call
//  - socketID string
func (_e *API_Expecter) GetPoliciesBySocketID(socketID interface{}) *API_GetPoliciesBySocketID_Call {
	return &API_GetPoliciesBySocketID_Call{Call: _e.mock.On("GetPoliciesBySocketID", socketID)}
}

func (_c *API_GetPoliciesBySocketID_Call) Run(run func(socketID string)) *API_GetPoliciesBySocketID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *API_GetPoliciesBySocketID_Call) Return(_a0 []models.Policy, _a1 error) *API_GetPoliciesBySocketID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPolicyByName provides a mock function with given fields: ctx, name
func (_m *API) GetPolicyByName(ctx context.Context, name string) (*models.Policy, error) {
	ret := _m.Called(ctx, name)

	var r0 *models.Policy
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Policy); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetPolicyByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyByName'
type API_GetPolicyByName_Call struct {
	*mock.Call
}

// GetPolicyByName is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
func (_e *API_Expecter) GetPolicyByName(ctx interface{}, name interface{}) *API_GetPolicyByName_Call {
	return &API_GetPolicyByName_Call{Call: _e.mock.On("GetPolicyByName", ctx, name)}
}

func (_c *API_GetPolicyByName_Call) Run(run func(ctx context.Context, name string)) *API_GetPolicyByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *API_GetPolicyByName_Call) Return(_a0 *models.Policy, _a1 error) *API_GetPolicyByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSocket provides a mock function with given fields: ctx, socketID
func (_m *API) GetSocket(ctx context.Context, socketID string) (*models.Socket, error) {
	ret := _m.Called(ctx, socketID)

	var r0 *models.Socket
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Socket); ok {
		r0 = rf(ctx, socketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Socket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSocket'
type API_GetSocket_Call struct {
	*mock.Call
}

// GetSocket is a helper method to define mock.On call
//  - ctx context.Context
//  - socketID string
func (_e *API_Expecter) GetSocket(ctx interface{}, socketID interface{}) *API_GetSocket_Call {
	return &API_GetSocket_Call{Call: _e.mock.On("GetSocket", ctx, socketID)}
}

func (_c *API_GetSocket_Call) Run(run func(ctx context.Context, socketID string)) *API_GetSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *API_GetSocket_Call) Return(_a0 *models.Socket, _a1 error) *API_GetSocket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSockets provides a mock function with given fields: ctx
func (_m *API) GetSockets(ctx context.Context) ([]models.Socket, error) {
	ret := _m.Called(ctx)

	var r0 []models.Socket
	if rf, ok := ret.Get(0).(func(context.Context) []models.Socket); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Socket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetSockets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSockets'
type API_GetSockets_Call struct {
	*mock.Call
}

// GetSockets is a helper method to define mock.On call
//  - ctx context.Context
func (_e *API_Expecter) GetSockets(ctx interface{}) *API_GetSockets_Call {
	return &API_GetSockets_Call{Call: _e.mock.On("GetSockets", ctx)}
}

func (_c *API_GetSockets_Call) Run(run func(ctx context.Context)) *API_GetSockets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *API_GetSockets_Call) Return(_a0 []models.Socket, _a1 error) *API_GetSockets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTunnel provides a mock function with given fields: ctx, socketID, tunnelID
func (_m *API) GetTunnel(ctx context.Context, socketID string, tunnelID string) (*models.Tunnel, error) {
	ret := _m.Called(ctx, socketID, tunnelID)

	var r0 *models.Tunnel
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Tunnel); ok {
		r0 = rf(ctx, socketID, tunnelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tunnel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, socketID, tunnelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetTunnel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTunnel'
type API_GetTunnel_Call struct {
	*mock.Call
}

// GetTunnel is a helper method to define mock.On call
//  - ctx context.Context
//  - socketID string
//  - tunnelID string
func (_e *API_Expecter) GetTunnel(ctx interface{}, socketID interface{}, tunnelID interface{}) *API_GetTunnel_Call {
	return &API_GetTunnel_Call{Call: _e.mock.On("GetTunnel", ctx, socketID, tunnelID)}
}

func (_c *API_GetTunnel_Call) Run(run func(ctx context.Context, socketID string, tunnelID string)) *API_GetTunnel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *API_GetTunnel_Call) Return(_a0 *models.Tunnel, _a1 error) *API_GetTunnel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Login provides a mock function with given fields: email, password
func (_m *API) Login(email string, password string) (*models.LoginResponse, error) {
	ret := _m.Called(email, password)

	var r0 *models.LoginResponse
	if rf, ok := ret.Get(0).(func(string, string) *models.LoginResponse); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type API_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//  - email string
//  - password string
func (_e *API_Expecter) Login(email interface{}, password interface{}) *API_Login_Call {
	return &API_Login_Call{Call: _e.mock.On("Login", email, password)}
}

func (_c *API_Login_Call) Run(run func(email string, password string)) *API_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *API_Login_Call) Return(_a0 *models.LoginResponse, _a1 error) *API_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateSocket provides a mock function with given fields: ctx, socketID, socket
func (_m *API) UpdateSocket(ctx context.Context, socketID string, socket models.Socket) error {
	ret := _m.Called(ctx, socketID, socket)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Socket) error); ok {
		r0 = rf(ctx, socketID, socket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// API_UpdateSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSocket'
type API_UpdateSocket_Call struct {
	*mock.Call
}

// UpdateSocket is a helper method to define mock.On call
//  - ctx context.Context
//  - socketID string
//  - socket models.Socket
func (_e *API_Expecter) UpdateSocket(ctx interface{}, socketID interface{}, socket interface{}) *API_UpdateSocket_Call {
	return &API_UpdateSocket_Call{Call: _e.mock.On("UpdateSocket", ctx, socketID, socket)}
}

func (_c *API_UpdateSocket_Call) Run(run func(ctx context.Context, socketID string, socket models.Socket)) *API_UpdateSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.Socket))
	})
	return _c
}

func (_c *API_UpdateSocket_Call) Return(_a0 error) *API_UpdateSocket_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPI(t mockConstructorTestingTNewAPI) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
